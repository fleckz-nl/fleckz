// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  email                 String           @unique
  firstName             String?
  lastName              String?
  avatarUrl             String?
  hashedPassword        String
  salt                  String
  resetToken            String?
  resetTokenExpiresAt   DateTime?
  roles                 Role[]           @default([CLIENT])
  workRequest           WorkRequest[]
  address               Address[]
  jobProfile            JobProfile[]
  certificate           Certificate[]
  clientBusinessCreated ClientBusiness[]
  commentsCreated       Comment[]
  tempAgency            TempAgency?      @relation(fields: [tempAgencyId], references: [id])
  tempAgencyId          String?
}

enum Role {
  CLIENT
  MEDIATOR
  TEMP_AGENCY_REP
  ADMIN
}

model WorkRequest {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  projectName  String
  jobProfile   JobProfile        @relation(fields: [jobProfileId], references: [id])
  jobProfileId String
  startDate    DateTime
  endDate      DateTime
  numWorkers   Int
  shifts       Shift[]
  location     Address           @relation(fields: [addressId], references: [id])
  addressId    String
  status       WorkRequestStatus @default(DRAFT)
  createdBy    User?             @relation(fields: [userId], references: [id])
  userId       String?
  comments     Comment[]
}

enum WorkRequestStatus {
  DRAFT
  SUBMITTED
  CONFIRMED
  DONE
}

model Address {
  id                  String           @id @default(cuid())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  street              String
  houseNumber         String
  houseNumberAddition String?
  postalCode          String
  city                String
  province            String?
  country             String           @default("Netherlands")
  workRequest         WorkRequest[]
  createdBy           User?            @relation(fields: [userId], references: [id])
  userId              String?
  TempAgency          TempAgency[]
  workplace           Workplace[]
  clientBusiness      ClientBusiness[]
}

model JobProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  yearsOfExp         Int
  certificates       Certificate[]
  hourlyWageMin      Decimal
  hourlyWageMax      Decimal
  maxTravelDistance  Float?
  isTravelReimbursed Boolean?
  isCarAvailable     Boolean?
  kmAllowance        Decimal?
  totalBudgetPerHour Decimal?
  comment            String?
  workRequest        WorkRequest[]
  createdBy          User?         @relation(fields: [userId], references: [id])
  userId             String?
}

model Certificate {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  issuingBody String?
  uri         String? @unique

  jobProfile   JobProfile? @relation(fields: [jobProfileId], references: [id])
  jobProfileId String?

  createdBy User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model TempAgency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  phone     String
  email     String
  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?
  shifts    Shift[]
  members   User[]
  worker    Worker[]
}

model Shift {
  id              String       @id @default(cuid())
  name            String?
  workerName      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  status          ShiftStatus  @default(UNFULFILLED)
  workRequest     WorkRequest? @relation(fields: [workRequestId], references: [id], onDelete: Cascade)
  workRequestId   String?
  rating          Int?
  tempAgency      TempAgency?  @relation(fields: [tempAgencyId], references: [id])
  tempAgencyId    String?
  hoursPlanned    Decimal?
  hoursWorked     Decimal?
  checkedInAt     DateTime?
  checkedOutAt    DateTime?
  hourlyWageInEur Decimal?
  invoice         Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId       String?
  bonuses         Bonus[]
  Worker          Worker?      @relation(fields: [workerId], references: [id])
  workerId        String?
}

model Bonus {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  shift              Shift    @relation(fields: [shiftId], references: [id])
  originalHourlyWage Decimal
  bonusRateInProp    Decimal // e.g., 10% bonus = 0.10
  from               DateTime
  to                 DateTime
  bonusHours         Decimal
  bonusEur           Decimal
  shiftId            String
  worker             Worker?  @relation(fields: [workerId], references: [id])
  workerId           String?
}

enum ShiftStatus {
  UNFULFILLED
  FULFILLED
  CHECKED_IN
  CHECKED_OUT
}

model ClientBusiness {
  id             String      @id @default(cuid())
  name           String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  workplaces     Workplace[]
  createdBy      User        @relation(fields: [userId], references: [id])
  userId         String
  invoices       Invoice[]
  billingAddress Address     @relation(fields: [addressId], references: [id])
  addressId      String
}

model Workplace {
  id               String         @id @default(cuid())
  name             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  clientBusiness   ClientBusiness @relation(fields: [clientBusinessId], references: [id], onDelete: Cascade)
  clientBusinessId String
  address          Address        @relation(fields: [addressId], references: [id])
  addressId        String
}

model Comment {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  body          String
  workRequest   WorkRequest @relation(fields: [workRequestId], references: [id])
  commentedBy   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  workRequestId String
}

model Invoice {
  id                  String         @id @default(cuid())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  invoiceNumber       String
  invoicedAt          DateTime
  dueAt               DateTime
  shifts              Shift[]
  billedTo            ClientBusiness @relation(fields: [clientBusinessId], references: [id])
  taxRateInProp       Decimal // e.g., 21%  = 0.21
  taxEur              Decimal
  totalBeforeTaxInEur Decimal
  totalAfterTaxInEur  Decimal
  status              InvoiceStatus
  clientBusinessId    String
}

enum InvoiceStatus {
  PENDING
  PAID
}

model Worker {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  firstName    String
  lastName     String
  tempAgency   TempAgency @relation(fields: [tempAgencyId], references: [id])
  tempAgencyId String
  shifts       Shift[]
  skills       Skill[]
  Bonus        Bonus[]
}

model Skill {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  type      SkillType
  worker    Worker[]
  workerId  String?
}

enum SkillType {
  SOFT
  HARD
}
